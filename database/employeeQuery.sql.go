// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: employeeQuery.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO Employees (
  name, dob, department, job_title,address,join_date, created_date
) VALUES (
  $1, $2 , $3, $4 , $5 , $6 , NOW()
)
RETURNING id, name, dob, department, job_title, address, join_date, created_date, updated_date, deleted_date
`

type CreateEmployeeParams struct {
	Name       string
	Dob        pgtype.Date
	Department string
	JobTitle   string
	Address    string
	JoinDate   pgtype.Date
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.Name,
		arg.Dob,
		arg.Department,
		arg.JobTitle,
		arg.Address,
		arg.JoinDate,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Department,
		&i.JobTitle,
		&i.Address,
		&i.JoinDate,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.DeletedDate,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, name, dob, department, job_title, address, join_date, created_date, updated_date, deleted_date FROM employees
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Department,
		&i.JobTitle,
		&i.Address,
		&i.JoinDate,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.DeletedDate,
	)
	return i, err
}

const getEmployeeByName = `-- name: GetEmployeeByName :one
SELECT id, name, dob, department, job_title, address, join_date, created_date, updated_date, deleted_date FROM employees
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetEmployeeByName(ctx context.Context, name string) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByName, name)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Department,
		&i.JobTitle,
		&i.Address,
		&i.JoinDate,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.DeletedDate,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, name, dob, department, job_title, address, join_date, created_date, updated_date, deleted_date FROM employees
ORDER BY name
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dob,
			&i.Department,
			&i.JobTitle,
			&i.Address,
			&i.JoinDate,
			&i.CreatedDate,
			&i.UpdatedDate,
			&i.DeletedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employees
  set name = coalesce($2,name),
  dob = coalesce($3,dob),
  department = coalesce($4,department),
  job_title = coalesce($5,job_title),
  address = coalesce($6,address),
  join_date = coalesce($7,join_date),
  updated_date = NOW()  
WHERE id = $1
RETURNING id, name, dob, department, job_title, address, join_date, created_date, updated_date, deleted_date
`

type UpdateEmployeeParams struct {
	ID         int64
	Name       string
	Dob        pgtype.Date
	Department string
	JobTitle   string
	Address    string
	JoinDate   pgtype.Date
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployee,
		arg.ID,
		arg.Name,
		arg.Dob,
		arg.Department,
		arg.JobTitle,
		arg.Address,
		arg.JoinDate,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Department,
		&i.JobTitle,
		&i.Address,
		&i.JoinDate,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.DeletedDate,
	)
	return i, err
}
